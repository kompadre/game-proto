/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.gameproto.v1.LookAroundRequest');

goog.require('jspb.Message');

goog.forwardDeclare('proto.gameproto.v1.Types');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gameproto.v1.LookAroundRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gameproto.v1.LookAroundRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.gameproto.v1.LookAroundRequest.displayName = 'proto.gameproto.v1.LookAroundRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gameproto.v1.LookAroundRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gameproto.v1.LookAroundRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gameproto.v1.LookAroundRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.gameproto.v1.LookAroundRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    myuuid: msg.getMyuuid(),
    otheruuid: msg.getOtheruuid(),
    type: msg.getType()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.gameproto.v1.LookAroundRequest} The clone.
 */
proto.gameproto.v1.LookAroundRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.gameproto.v1.LookAroundRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string myuuid = 1;
 * @return {string}
 */
proto.gameproto.v1.LookAroundRequest.prototype.getMyuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.gameproto.v1.LookAroundRequest.prototype.setMyuuid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string otheruuid = 2;
 * @return {string}
 */
proto.gameproto.v1.LookAroundRequest.prototype.getOtheruuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.gameproto.v1.LookAroundRequest.prototype.setOtheruuid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional Types type = 3;
 * @return {!proto.gameproto.v1.Types}
 */
proto.gameproto.v1.LookAroundRequest.prototype.getType = function() {
  return /** @type {!proto.gameproto.v1.Types} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {!proto.gameproto.v1.Types} value  */
proto.gameproto.v1.LookAroundRequest.prototype.setType = function(value) {
  jspb.Message.setField(this, 3, value);
};


