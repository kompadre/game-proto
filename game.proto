syntax = "proto3";

package gameproto.v1;
option go_package = "proto";

message SessionRequest {
    string username = 1;
    string password = 2;
}

message SessionGrant {
    string uuid = 1;
    string reason = 2;
}

enum Types {
    SYSTEM = 0;
    MAP = 1;
    CHAT = 2;
    OTHER = 99;
}

message LookAroundRequest {
    string myuuid = 1;
    string otheruuid = 2;
    Types type = 3;
}

message LookAroundAnswer {
    repeated Object results = 1;
    Types type = 2;
}

message ObjectAttribute {
    string name = 1;
    string currentvalue = 2;
    string targetvalue = 3;
    int32 ttl = 4;
}

message Object {
    string uuid = 1;
    int32 x = 2;
    int32 y = 3;
    repeated ObjectAttribute attributes = 4;
}

message EntityCreated {
    uint32 timestamp = 1;
    uint32 id = 2;
}

message EntityDestroyed {
    uint32 timestamp = 1;
    uint32 id = 2;
}

message Vector2 {
    float x = 1;
    float y = 2;
}

message Rotation {
    uint32 timestamp = 1;
    float angle = 2;
}

message EntityMotionState {
    uint32 timestamp = 1;
    uint32 id = 2;
    Vector2 position = 3;
    float rotation = 4;
    Vector2 velocity = 5;
}

//Used to represent visual appearance of an object
message EntitySkin {
    uint32 timestamp = 1;
    uint32 id = 2;
    uint32 skin = 3;
}

enum ActionType {
    FIRE_PRIMARY = 0;
}

message ActionRecord {
    uint32 timestamp = 1;
    ActionType action = 2;
}

message Ack{
    bool success=1;
}

message Timestamp{
    uint32 value =1;
}

service Session {
    rpc NewSession (SessionRequest) returns (SessionGrant);
    rpc LookAround (stream LookAroundRequest) returns (stream LookAroundAnswer);
    rpc CommandSetRotation (Rotation) returns (Ack);
    rpc CommandSetMoveDirection (Rotation) returns (Ack);
    rpc CommandStartMove (Timestamp) returns (Ack);
    rpc CommandEndMove (Timestamp) returns (Ack);
    rpc CommandStartAction (ActionRecord) returns (Ack);
    rpc CommandEndAction (ActionRecord) returns (Ack);
    rpc GetEntitySkin (Timestamp) returns (EntitySkin);
    rpc GetMotionState (Timestamp) returns (EntityMotionState);
    rpc GetMotionStateStream (Timestamp) returns (stream EntityMotionState);
}
